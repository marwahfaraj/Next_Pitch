2023-07-04 23:44:30,163:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-04 23:44:30,163:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-04 23:44:30,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-04 23:44:30,164:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:05:36,490:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:05:36,491:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:05:36,491:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:05:36,491:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:11:01,890:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/multimethod/__init__.py:315: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  return func(*args, **kwargs)

2023-07-05 00:28:14,463:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:28:14,463:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:28:14,463:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:28:14,463:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:54:34,443:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:54:34,443:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:54:34,443:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 00:54:34,443:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 01:30:31,995:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 01:30:31,995:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 01:30:31,996:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 01:30:31,996:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:52:28,672:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:52:28,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:52:28,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:52:28,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:58:44,328:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:58:44,328:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:58:44,328:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 09:58:44,328:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 10:21:15,678:INFO:PyCaret ClassificationExperiment
2023-07-05 10:21:15,679:INFO:Logging name: clf-default-name
2023-07-05 10:21:15,679:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-07-05 10:21:15,680:INFO:version 3.0.4
2023-07-05 10:21:15,680:INFO:Initializing setup()
2023-07-05 10:21:15,680:INFO:self.USI: 5791
2023-07-05 10:21:15,680:INFO:self._variable_keys: {'X_train', 'log_plots_param', 'gpu_param', 'y_test', '_available_plots', 'pipeline', 'data', 'target_param', '_ml_usecase', 'fold_shuffle_param', 'y', 'gpu_n_jobs_param', 'logging_param', 'fix_imbalance', 'X', 'exp_id', 'is_multiclass', 'html_param', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'X_test', 'y_train', 'exp_name_log', 'seed', 'memory', 'n_jobs_param'}
2023-07-05 10:21:15,680:INFO:Checking environment
2023-07-05 10:21:15,681:INFO:python_version: 3.8.16
2023-07-05 10:21:15,681:INFO:python_build: ('default', 'Jun 12 2023 12:55:15')
2023-07-05 10:21:15,681:INFO:machine: x86_64
2023-07-05 10:21:15,681:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-07-05 10:21:15,682:INFO:Memory: svmem(total=17179869184, available=6043762688, percent=64.8, used=9565097984, free=352505856, active=5694615552, inactive=5683351552, wired=3870482432)
2023-07-05 10:21:15,682:INFO:Physical Core: 4
2023-07-05 10:21:15,682:INFO:Logical Core: 8
2023-07-05 10:21:15,682:INFO:Checking libraries
2023-07-05 10:21:15,682:INFO:System:
2023-07-05 10:21:15,682:INFO:    python: 3.8.16 (default, Jun 12 2023, 12:55:15)  [Clang 14.0.6 ]
2023-07-05 10:21:15,682:INFO:executable: /Users/marwahfaraj/miniconda3/envs/my_env/bin/python
2023-07-05 10:21:15,683:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-07-05 10:21:15,683:INFO:PyCaret required dependencies:
2023-07-05 10:21:15,692:INFO:                 pip: 23.1.2
2023-07-05 10:21:15,692:INFO:          setuptools: 67.8.0
2023-07-05 10:21:15,692:INFO:             pycaret: 3.0.4
2023-07-05 10:21:15,692:INFO:             IPython: 8.12.0
2023-07-05 10:21:15,692:INFO:          ipywidgets: 8.0.7
2023-07-05 10:21:15,692:INFO:                tqdm: 4.65.0
2023-07-05 10:21:15,693:INFO:               numpy: 1.23.5
2023-07-05 10:21:15,693:INFO:              pandas: 1.5.3
2023-07-05 10:21:15,693:INFO:              jinja2: 3.1.2
2023-07-05 10:21:15,693:INFO:               scipy: 1.10.1
2023-07-05 10:21:15,693:INFO:              joblib: 1.3.1
2023-07-05 10:21:15,693:INFO:             sklearn: 1.2.2
2023-07-05 10:21:15,693:INFO:                pyod: 1.1.0
2023-07-05 10:21:15,693:INFO:            imblearn: 0.10.1
2023-07-05 10:21:15,693:INFO:   category_encoders: 2.6.1
2023-07-05 10:21:15,693:INFO:            lightgbm: 3.3.5
2023-07-05 10:21:15,693:INFO:               numba: 0.57.1
2023-07-05 10:21:15,693:INFO:            requests: 2.31.0
2023-07-05 10:21:15,693:INFO:          matplotlib: 3.7.1
2023-07-05 10:21:15,693:INFO:          scikitplot: 0.3.7
2023-07-05 10:21:15,693:INFO:         yellowbrick: 1.5
2023-07-05 10:21:15,693:INFO:              plotly: 5.15.0
2023-07-05 10:21:15,693:INFO:    plotly-resampler: Not installed
2023-07-05 10:21:15,693:INFO:             kaleido: 0.2.1
2023-07-05 10:21:15,693:INFO:           schemdraw: 0.15
2023-07-05 10:21:15,693:INFO:         statsmodels: 0.14.0
2023-07-05 10:21:15,693:INFO:              sktime: 0.20.0
2023-07-05 10:21:15,693:INFO:               tbats: 1.1.3
2023-07-05 10:21:15,694:INFO:            pmdarima: 2.0.3
2023-07-05 10:21:15,694:INFO:              psutil: 5.9.5
2023-07-05 10:21:15,694:INFO:          markupsafe: 2.1.3
2023-07-05 10:21:15,694:INFO:             pickle5: Not installed
2023-07-05 10:21:15,694:INFO:         cloudpickle: 2.2.1
2023-07-05 10:21:15,694:INFO:         deprecation: 2.1.0
2023-07-05 10:21:15,694:INFO:              xxhash: 3.2.0
2023-07-05 10:21:15,694:INFO:           wurlitzer: 3.0.3
2023-07-05 10:21:15,694:INFO:PyCaret optional dependencies:
2023-07-05 10:21:15,717:INFO:                shap: Not installed
2023-07-05 10:21:15,717:INFO:           interpret: Not installed
2023-07-05 10:21:15,717:INFO:                umap: Not installed
2023-07-05 10:21:15,717:INFO:    pandas_profiling: 4.3.1
2023-07-05 10:21:15,717:INFO:  explainerdashboard: Not installed
2023-07-05 10:21:15,717:INFO:             autoviz: Not installed
2023-07-05 10:21:15,717:INFO:           fairlearn: Not installed
2023-07-05 10:21:15,717:INFO:          deepchecks: Not installed
2023-07-05 10:21:15,717:INFO:             xgboost: Not installed
2023-07-05 10:21:15,717:INFO:            catboost: Not installed
2023-07-05 10:21:15,717:INFO:              kmodes: Not installed
2023-07-05 10:21:15,717:INFO:             mlxtend: Not installed
2023-07-05 10:21:15,717:INFO:       statsforecast: Not installed
2023-07-05 10:21:15,718:INFO:        tune_sklearn: Not installed
2023-07-05 10:21:15,718:INFO:                 ray: Not installed
2023-07-05 10:21:15,718:INFO:            hyperopt: Not installed
2023-07-05 10:21:15,718:INFO:              optuna: Not installed
2023-07-05 10:21:15,718:INFO:               skopt: Not installed
2023-07-05 10:21:15,718:INFO:              mlflow: Not installed
2023-07-05 10:21:15,718:INFO:              gradio: Not installed
2023-07-05 10:21:15,718:INFO:             fastapi: Not installed
2023-07-05 10:21:15,718:INFO:             uvicorn: Not installed
2023-07-05 10:21:15,718:INFO:              m2cgen: Not installed
2023-07-05 10:21:15,718:INFO:           evidently: Not installed
2023-07-05 10:21:15,718:INFO:               fugue: Not installed
2023-07-05 10:21:15,718:INFO:           streamlit: 1.23.1
2023-07-05 10:21:15,718:INFO:             prophet: Not installed
2023-07-05 10:21:15,718:INFO:None
2023-07-05 10:21:15,718:INFO:Set up data.
2023-07-05 10:22:51,228:INFO:PyCaret ClassificationExperiment
2023-07-05 10:22:51,228:INFO:Logging name: clf-default-name
2023-07-05 10:22:51,229:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-07-05 10:22:51,229:INFO:version 3.0.4
2023-07-05 10:22:51,229:INFO:Initializing setup()
2023-07-05 10:22:51,229:INFO:self.USI: 70f3
2023-07-05 10:22:51,229:INFO:self._variable_keys: {'X_train', 'log_plots_param', 'gpu_param', 'y_test', '_available_plots', 'pipeline', 'data', 'target_param', '_ml_usecase', 'fold_shuffle_param', 'y', 'gpu_n_jobs_param', 'logging_param', 'fix_imbalance', 'X', 'exp_id', 'is_multiclass', 'html_param', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'X_test', 'y_train', 'exp_name_log', 'seed', 'memory', 'n_jobs_param'}
2023-07-05 10:22:51,229:INFO:Checking environment
2023-07-05 10:22:51,229:INFO:python_version: 3.8.16
2023-07-05 10:22:51,229:INFO:python_build: ('default', 'Jun 12 2023 12:55:15')
2023-07-05 10:22:51,229:INFO:machine: x86_64
2023-07-05 10:22:51,229:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-07-05 10:22:51,229:INFO:Memory: svmem(total=17179869184, available=6683774976, percent=61.1, used=10203099136, free=194940928, active=6493106176, inactive=6487457792, wired=3709992960)
2023-07-05 10:22:51,229:INFO:Physical Core: 4
2023-07-05 10:22:51,229:INFO:Logical Core: 8
2023-07-05 10:22:51,229:INFO:Checking libraries
2023-07-05 10:22:51,229:INFO:System:
2023-07-05 10:22:51,229:INFO:    python: 3.8.16 (default, Jun 12 2023, 12:55:15)  [Clang 14.0.6 ]
2023-07-05 10:22:51,229:INFO:executable: /Users/marwahfaraj/miniconda3/envs/my_env/bin/python
2023-07-05 10:22:51,229:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-07-05 10:22:51,229:INFO:PyCaret required dependencies:
2023-07-05 10:22:51,230:INFO:                 pip: 23.1.2
2023-07-05 10:22:51,230:INFO:          setuptools: 67.8.0
2023-07-05 10:22:51,230:INFO:             pycaret: 3.0.4
2023-07-05 10:22:51,230:INFO:             IPython: 8.12.0
2023-07-05 10:22:51,230:INFO:          ipywidgets: 8.0.7
2023-07-05 10:22:51,230:INFO:                tqdm: 4.65.0
2023-07-05 10:22:51,230:INFO:               numpy: 1.23.5
2023-07-05 10:22:51,230:INFO:              pandas: 1.5.3
2023-07-05 10:22:51,230:INFO:              jinja2: 3.1.2
2023-07-05 10:22:51,230:INFO:               scipy: 1.10.1
2023-07-05 10:22:51,230:INFO:              joblib: 1.3.1
2023-07-05 10:22:51,230:INFO:             sklearn: 1.2.2
2023-07-05 10:22:51,230:INFO:                pyod: 1.1.0
2023-07-05 10:22:51,230:INFO:            imblearn: 0.10.1
2023-07-05 10:22:51,230:INFO:   category_encoders: 2.6.1
2023-07-05 10:22:51,230:INFO:            lightgbm: 3.3.5
2023-07-05 10:22:51,230:INFO:               numba: 0.57.1
2023-07-05 10:22:51,230:INFO:            requests: 2.31.0
2023-07-05 10:22:51,230:INFO:          matplotlib: 3.7.1
2023-07-05 10:22:51,230:INFO:          scikitplot: 0.3.7
2023-07-05 10:22:51,231:INFO:         yellowbrick: 1.5
2023-07-05 10:22:51,231:INFO:              plotly: 5.15.0
2023-07-05 10:22:51,231:INFO:    plotly-resampler: Not installed
2023-07-05 10:22:51,231:INFO:             kaleido: 0.2.1
2023-07-05 10:22:51,231:INFO:           schemdraw: 0.15
2023-07-05 10:22:51,231:INFO:         statsmodels: 0.14.0
2023-07-05 10:22:51,231:INFO:              sktime: 0.20.0
2023-07-05 10:22:51,231:INFO:               tbats: 1.1.3
2023-07-05 10:22:51,231:INFO:            pmdarima: 2.0.3
2023-07-05 10:22:51,231:INFO:              psutil: 5.9.5
2023-07-05 10:22:51,231:INFO:          markupsafe: 2.1.3
2023-07-05 10:22:51,231:INFO:             pickle5: Not installed
2023-07-05 10:22:51,231:INFO:         cloudpickle: 2.2.1
2023-07-05 10:22:51,231:INFO:         deprecation: 2.1.0
2023-07-05 10:22:51,231:INFO:              xxhash: 3.2.0
2023-07-05 10:22:51,231:INFO:           wurlitzer: 3.0.3
2023-07-05 10:22:51,231:INFO:PyCaret optional dependencies:
2023-07-05 10:22:51,231:INFO:                shap: Not installed
2023-07-05 10:22:51,231:INFO:           interpret: Not installed
2023-07-05 10:22:51,231:INFO:                umap: Not installed
2023-07-05 10:22:51,231:INFO:    pandas_profiling: 4.3.1
2023-07-05 10:22:51,231:INFO:  explainerdashboard: Not installed
2023-07-05 10:22:51,231:INFO:             autoviz: Not installed
2023-07-05 10:22:51,231:INFO:           fairlearn: Not installed
2023-07-05 10:22:51,231:INFO:          deepchecks: Not installed
2023-07-05 10:22:51,231:INFO:             xgboost: Not installed
2023-07-05 10:22:51,231:INFO:            catboost: Not installed
2023-07-05 10:22:51,231:INFO:              kmodes: Not installed
2023-07-05 10:22:51,231:INFO:             mlxtend: Not installed
2023-07-05 10:22:51,231:INFO:       statsforecast: Not installed
2023-07-05 10:22:51,231:INFO:        tune_sklearn: Not installed
2023-07-05 10:22:51,232:INFO:                 ray: Not installed
2023-07-05 10:22:51,232:INFO:            hyperopt: Not installed
2023-07-05 10:22:51,232:INFO:              optuna: Not installed
2023-07-05 10:22:51,232:INFO:               skopt: Not installed
2023-07-05 10:22:51,232:INFO:              mlflow: Not installed
2023-07-05 10:22:51,232:INFO:              gradio: Not installed
2023-07-05 10:22:51,232:INFO:             fastapi: Not installed
2023-07-05 10:22:51,232:INFO:             uvicorn: Not installed
2023-07-05 10:22:51,232:INFO:              m2cgen: Not installed
2023-07-05 10:22:51,232:INFO:           evidently: Not installed
2023-07-05 10:22:51,232:INFO:               fugue: Not installed
2023-07-05 10:22:51,232:INFO:           streamlit: 1.23.1
2023-07-05 10:22:51,232:INFO:             prophet: Not installed
2023-07-05 10:22:51,232:INFO:None
2023-07-05 10:22:51,233:INFO:Set up data.
2023-07-05 10:40:58,064:INFO:PyCaret ClassificationExperiment
2023-07-05 10:40:58,064:INFO:Logging name: clf-default-name
2023-07-05 10:40:58,065:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-07-05 10:40:58,065:INFO:version 3.0.4
2023-07-05 10:40:58,065:INFO:Initializing setup()
2023-07-05 10:40:58,065:INFO:self.USI: 9aa1
2023-07-05 10:40:58,065:INFO:self._variable_keys: {'X_train', 'log_plots_param', 'gpu_param', 'y_test', '_available_plots', 'pipeline', 'data', 'target_param', '_ml_usecase', 'fold_shuffle_param', 'y', 'gpu_n_jobs_param', 'logging_param', 'fix_imbalance', 'X', 'exp_id', 'is_multiclass', 'html_param', 'fold_groups_param', 'USI', 'fold_generator', 'idx', 'X_test', 'y_train', 'exp_name_log', 'seed', 'memory', 'n_jobs_param'}
2023-07-05 10:40:58,065:INFO:Checking environment
2023-07-05 10:40:58,065:INFO:python_version: 3.8.16
2023-07-05 10:40:58,065:INFO:python_build: ('default', 'Jun 12 2023 12:55:15')
2023-07-05 10:40:58,065:INFO:machine: x86_64
2023-07-05 10:40:58,065:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-07-05 10:40:58,065:INFO:Memory: svmem(total=17179869184, available=6716305408, percent=60.9, used=10206183424, free=241078272, active=6508347392, inactive=6473019392, wired=3697836032)
2023-07-05 10:40:58,065:INFO:Physical Core: 4
2023-07-05 10:40:58,065:INFO:Logical Core: 8
2023-07-05 10:40:58,065:INFO:Checking libraries
2023-07-05 10:40:58,066:INFO:System:
2023-07-05 10:40:58,066:INFO:    python: 3.8.16 (default, Jun 12 2023, 12:55:15)  [Clang 14.0.6 ]
2023-07-05 10:40:58,066:INFO:executable: /Users/marwahfaraj/miniconda3/envs/my_env/bin/python
2023-07-05 10:40:58,066:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-07-05 10:40:58,066:INFO:PyCaret required dependencies:
2023-07-05 10:40:58,066:INFO:                 pip: 23.1.2
2023-07-05 10:40:58,066:INFO:          setuptools: 67.8.0
2023-07-05 10:40:58,066:INFO:             pycaret: 3.0.4
2023-07-05 10:40:58,066:INFO:             IPython: 8.12.0
2023-07-05 10:40:58,066:INFO:          ipywidgets: 8.0.7
2023-07-05 10:40:58,066:INFO:                tqdm: 4.65.0
2023-07-05 10:40:58,066:INFO:               numpy: 1.23.5
2023-07-05 10:40:58,066:INFO:              pandas: 1.5.3
2023-07-05 10:40:58,066:INFO:              jinja2: 3.1.2
2023-07-05 10:40:58,066:INFO:               scipy: 1.10.1
2023-07-05 10:40:58,066:INFO:              joblib: 1.3.1
2023-07-05 10:40:58,066:INFO:             sklearn: 1.2.2
2023-07-05 10:40:58,066:INFO:                pyod: 1.1.0
2023-07-05 10:40:58,066:INFO:            imblearn: 0.10.1
2023-07-05 10:40:58,066:INFO:   category_encoders: 2.6.1
2023-07-05 10:40:58,066:INFO:            lightgbm: 3.3.5
2023-07-05 10:40:58,066:INFO:               numba: 0.57.1
2023-07-05 10:40:58,066:INFO:            requests: 2.31.0
2023-07-05 10:40:58,066:INFO:          matplotlib: 3.7.1
2023-07-05 10:40:58,066:INFO:          scikitplot: 0.3.7
2023-07-05 10:40:58,066:INFO:         yellowbrick: 1.5
2023-07-05 10:40:58,066:INFO:              plotly: 5.15.0
2023-07-05 10:40:58,066:INFO:    plotly-resampler: Not installed
2023-07-05 10:40:58,066:INFO:             kaleido: 0.2.1
2023-07-05 10:40:58,067:INFO:           schemdraw: 0.15
2023-07-05 10:40:58,067:INFO:         statsmodels: 0.14.0
2023-07-05 10:40:58,067:INFO:              sktime: 0.20.0
2023-07-05 10:40:58,067:INFO:               tbats: 1.1.3
2023-07-05 10:40:58,067:INFO:            pmdarima: 2.0.3
2023-07-05 10:40:58,067:INFO:              psutil: 5.9.5
2023-07-05 10:40:58,067:INFO:          markupsafe: 2.1.3
2023-07-05 10:40:58,067:INFO:             pickle5: Not installed
2023-07-05 10:40:58,067:INFO:         cloudpickle: 2.2.1
2023-07-05 10:40:58,067:INFO:         deprecation: 2.1.0
2023-07-05 10:40:58,067:INFO:              xxhash: 3.2.0
2023-07-05 10:40:58,067:INFO:           wurlitzer: 3.0.3
2023-07-05 10:40:58,067:INFO:PyCaret optional dependencies:
2023-07-05 10:40:58,067:INFO:                shap: Not installed
2023-07-05 10:40:58,067:INFO:           interpret: Not installed
2023-07-05 10:40:58,067:INFO:                umap: Not installed
2023-07-05 10:40:58,067:INFO:    pandas_profiling: 4.3.1
2023-07-05 10:40:58,067:INFO:  explainerdashboard: Not installed
2023-07-05 10:40:58,067:INFO:             autoviz: Not installed
2023-07-05 10:40:58,067:INFO:           fairlearn: Not installed
2023-07-05 10:40:58,067:INFO:          deepchecks: Not installed
2023-07-05 10:40:58,067:INFO:             xgboost: Not installed
2023-07-05 10:40:58,067:INFO:            catboost: Not installed
2023-07-05 10:40:58,067:INFO:              kmodes: Not installed
2023-07-05 10:40:58,067:INFO:             mlxtend: Not installed
2023-07-05 10:40:58,067:INFO:       statsforecast: Not installed
2023-07-05 10:40:58,067:INFO:        tune_sklearn: Not installed
2023-07-05 10:40:58,067:INFO:                 ray: Not installed
2023-07-05 10:40:58,067:INFO:            hyperopt: Not installed
2023-07-05 10:40:58,067:INFO:              optuna: Not installed
2023-07-05 10:40:58,067:INFO:               skopt: Not installed
2023-07-05 10:40:58,067:INFO:              mlflow: Not installed
2023-07-05 10:40:58,067:INFO:              gradio: Not installed
2023-07-05 10:40:58,068:INFO:             fastapi: Not installed
2023-07-05 10:40:58,068:INFO:             uvicorn: Not installed
2023-07-05 10:40:58,068:INFO:              m2cgen: Not installed
2023-07-05 10:40:58,068:INFO:           evidently: Not installed
2023-07-05 10:40:58,068:INFO:               fugue: Not installed
2023-07-05 10:40:58,068:INFO:           streamlit: 1.23.1
2023-07-05 10:40:58,068:INFO:             prophet: Not installed
2023-07-05 10:40:58,068:INFO:None
2023-07-05 10:40:58,068:INFO:Set up data.
2023-07-05 10:41:01,662:INFO:Set up train/test split.
2023-07-05 10:41:03,507:INFO:Set up index.
2023-07-05 10:41:03,577:INFO:Set up folding strategy.
2023-07-05 10:41:03,577:INFO:Assigning column types.
2023-07-05 10:41:04,125:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-07-05 10:41:04,176:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-07-05 10:41:04,193:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-05 10:41:04,250:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,032:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,085:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-07-05 10:41:05,086:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-05 10:41:05,119:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,119:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,120:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-07-05 10:41:05,174:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-05 10:41:05,213:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,213:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,270:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-05 10:41:05,302:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,303:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,303:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-07-05 10:41:05,385:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,386:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,476:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,477:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 10:41:05,481:INFO:Preparing preprocessing pipeline...
2023-07-05 10:41:05,584:INFO:Set up label encoding.
2023-07-05 10:41:05,585:INFO:Set up simple imputation.
2023-07-05 10:41:05,840:INFO:Set up encoding of ordinal features.
2023-07-05 10:41:06,032:INFO:Set up encoding of categorical features.
2023-07-05 10:52:03,930:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 10:52:03,931:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 10:52:03,931:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 10:52:03,931:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 11:54:44,635:INFO:Finished creating preprocessing pipeline.
2023-07-05 11:54:44,712:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/82/m9t9280x1r134kqynmcb35l40000gn/T/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['uid', 'game_pk', 'year',
                                             'team_id_b', 'team_id_p', 'inning',
                                             'top', 'at_bat_num',
                                             'pcount_at...
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['date', 'start_tfs_zulu',
                                             'pitch_tfs_zulu', 'sv_id', 'cc'],
                                    transformer=TargetEncoder(cols=['date',
                                                                    'start_tfs_zulu',
                                                                    'pitch_tfs_zulu',
                                                                    'sv_id',
                                                                    'cc'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2023-07-05 11:54:44,712:INFO:Creating final display dataframe.
2023-07-05 12:36:04,719:INFO:Setup _display_container:                     Description  \
0                    Session id   
1                        Target   
2                   Target type   
3                Target mapping   
4           Original data shape   
5        Transformed data shape   
6   Transformed train set shape   
7    Transformed test set shape   
8              Ordinal features   
9              Numeric features   
10         Categorical features   
11     Rows with missing values   
12                   Preprocess   
13              Imputation type   
14           Numeric imputation   
15       Categorical imputation   
16     Maximum one-hot encoding   
17              Encoding method   
18               Fold Generator   
19                  Fold Number   
20                     CPU Jobs   
21                      Use GPU   
22               Log Experiment   
23              Experiment Name   
24                          USI   

                                                Value  
0                                                7765  
1                                          pitch_type  
2                                          Multiclass  
3   AB: 0, CH: 1, CU: 2, EP: 3, FA: 4, FC: 5, FF: ...  
4                                        (716681, 61)  
5                                        (716681, 80)  
6                                        (501676, 80)  
7                                        (215005, 80)  
8                                                   1  
9                                                  52  
10                                                  8  
11                                              99.9%  
12                                               True  
13                                             simple  
14                                               mean  
15                                               mode  
16                                                 25  
17                                               None  
18                                    StratifiedKFold  
19                                                 10  
20                                                 -1  
21                                              False  
22                                              False  
23                                   clf-default-name  
24                                               9aa1  
2023-07-05 12:36:05,065:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 12:36:05,072:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 12:36:05,148:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 12:36:05,148:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-05 12:36:05,158:INFO:setup() successfully completed in 6907.1s...............
2023-07-05 14:37:46,592:INFO:Initializing compare_models()
2023-07-05 14:37:46,593:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-07-05 14:37:46,593:INFO:Checking exceptions
2023-07-05 14:37:47,403:INFO:Preparing display monitor
2023-07-05 14:37:47,835:INFO:Initializing Logistic Regression
2023-07-05 14:37:47,835:INFO:Total runtime is 8.916854858398437e-06 minutes
2023-07-05 14:37:47,851:INFO:SubProcess create_model() called ==================================
2023-07-05 14:37:47,861:INFO:Initializing create_model()
2023-07-05 14:37:47,862:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff4d4f5d220>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 14:37:47,862:INFO:Checking exceptions
2023-07-05 14:37:47,862:INFO:Importing libraries
2023-07-05 14:37:47,862:INFO:Copying training dataset
2023-07-05 14:37:48,593:INFO:Defining folds
2023-07-05 14:37:48,593:INFO:Declaring metric variables
2023-07-05 14:37:48,597:INFO:Importing untrained model
2023-07-05 14:37:48,603:INFO:Logistic Regression Imported successfully
2023-07-05 14:37:48,622:INFO:Starting cross validation
2023-07-05 14:37:48,705:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 14:38:05,692:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:05,938:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:05,942:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:07,422:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:08,254:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:09,397:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:11,077:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:11,880:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:12,202:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:12,485:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:12,493:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.26s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:13,364:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.18s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:14,195:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:15,188:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.51s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:17,413:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:18,238:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:25,882:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:25,894:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:25,923:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:25,961:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:26,068:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:26,329:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:26,954:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:27,047:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:32,432:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:32,434:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:32,542:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:32,546:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:32,581:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:32,902:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:33,607:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:33,676:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:44,065:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:44,084:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.06s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:44,156:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:44,159:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.23s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:44,196:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:44,284:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:45,251:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:45,437:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:38:50,409:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:50,603:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:50,624:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:50,679:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:50,690:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:50,745:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:51,599:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:38:51,704:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:10,765:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:11,427:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.64s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:11,854:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:12,161:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:12,520:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:12,906:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:12,983:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:13,388:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:19,570:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:20,094:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:20,441:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.46s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:20,781:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:21,197:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:21,595:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:21,789:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:21,994:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:39:38,767:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:42,708:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:43,132:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.17s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:43,192:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:43,414:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:43,539:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:43,594:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:39:44,478:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:08,652:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 8.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:12,750:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:13,347:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:13,357:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:13,559:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:13,621:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.69s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:13,740:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:14,751:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:40:39,323:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 13.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:45,961:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:57,461:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.39s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:57,581:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:57,951:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.51s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:58,135:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:58,199:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:40:58,538:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 11.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:52:33,608:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:52:35,639:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:52:39,901:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:52:42,054:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 2.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:52:43,102:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:52:45,158:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 2.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:52:50,653:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:52:52,226:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:52:52,347:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:52:54,088:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:52:56,062:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:52:57,954:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:52:58,616:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:52:59,028:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:52:59,425:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:00,064:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.40s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:53:00,581:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:53:01,009:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:01,639:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:02,163:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:53:03,876:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:05,411:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:06,574:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:06,933:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:08,197:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.67s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:08,504:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:08,555:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:53:09,536:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 0.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 14:53:11,203:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:11,952:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 4.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:12,733:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:14,289:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.63s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:14,812:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:15,886:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.73s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:15,988:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:16,494:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:17,406:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.67s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:17,975:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 5.31s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:18,868:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:19,022:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.60s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:19,810:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.55s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:20,766:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 5.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:21,152:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:21,328:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:22,832:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:22,938:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:24,516:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:24,775:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:25,246:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 7.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:26,183:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:26,532:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:27,010:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:27,290:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:27,686:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:27,824:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 5.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:28,014:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:28,087:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 7.28s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:28,278:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:29,394:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:31,164:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:31,247:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 5.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:33,125:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:33,140:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:33,681:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:34,470:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:34,850:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:35,143:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:35,684:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 6.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:35,692:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 7.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:36,086:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:36,324:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:36,658:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:36,965:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:37,209:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 5.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:37,300:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:37,695:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:38,158:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:38,865:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 7.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:42,485:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:53:42,553:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:42,732:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:42,951:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:43,220:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:43,546:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:43,874:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:44,036:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:44,141:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:44,351:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 4.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:53:44,412:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:45,534:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:45,776:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:46,078:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:46,379:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:46,647:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:46,878:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:47,133:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:47,146:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:53:47,325:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:53:48,713:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:48,901:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:49,126:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:49,373:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:49,590:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:49,769:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:49,796:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:49,900:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 14:53:49,982:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:50,025:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:50,226:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:50,525:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:50,724:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:50,892:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:51,073:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:51,094:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:53:52,362:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:53:53,875:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 14:53:54,036:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:54,207:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:54,357:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:54,539:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 14:53:54,695:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 14:53:54,855:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 14:53:55,371:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:53:56,070:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:53:58,909:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:00,427:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:03,094:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:03,781:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:06,553:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:08,874:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.45s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:11,518:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.48s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:12,711:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:15,387:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:18,295:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:20,807:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.45s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:30,635:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:33,436:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 14:54:41,466:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:54:43,964:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 14:59:44,817:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:59:48,985:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 14:59:51,574:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:59:53,666:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:59:56,031:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 14:59:58,414:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:00:00,977:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:00:03,987:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:00:05,176:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:00:07,018:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:00:07,140:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:00:07,278:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:00:07,400:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:00:07,536:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:00:07,662:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:00:07,799:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:00:08,198:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:00:11,278:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:00:11,398:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:00:11,533:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:00:11,649:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:00:11,785:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:00:11,904:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:00:12,042:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:00:12,454:INFO:Calculating mean and std
2023-07-05 15:00:12,509:INFO:Creating metrics dataframe
2023-07-05 15:00:12,612:INFO:Uploading results into container
2023-07-05 15:00:12,614:INFO:Uploading model into container now
2023-07-05 15:00:12,621:INFO:_master_model_container: 1
2023-07-05 15:00:12,621:INFO:_display_container: 2
2023-07-05 15:00:12,626:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7765, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-07-05 15:00:12,626:INFO:create_model() successfully completed......................................
2023-07-05 15:00:14,173:INFO:SubProcess create_model() end ==================================
2023-07-05 15:00:14,174:INFO:Creating metrics dataframe
2023-07-05 15:00:14,199:INFO:Initializing K Neighbors Classifier
2023-07-05 15:00:14,199:INFO:Total runtime is 22.439410463968915 minutes
2023-07-05 15:00:14,204:INFO:SubProcess create_model() called ==================================
2023-07-05 15:00:14,205:INFO:Initializing create_model()
2023-07-05 15:00:14,205:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff4d4f5d220>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 15:00:14,205:INFO:Checking exceptions
2023-07-05 15:00:14,205:INFO:Importing libraries
2023-07-05 15:00:14,206:INFO:Copying training dataset
2023-07-05 15:00:15,262:INFO:Defining folds
2023-07-05 15:00:15,263:INFO:Declaring metric variables
2023-07-05 15:00:15,269:INFO:Importing untrained model
2023-07-05 15:00:15,273:INFO:K Neighbors Classifier Imported successfully
2023-07-05 15:00:15,281:INFO:Starting cross validation
2023-07-05 15:00:15,429:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 15:00:23,758:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.18s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:24,858:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:29,638:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:30,622:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:32,806:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:32,915:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:33,580:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.39s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:35,543:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:37,257:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:37,852:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:39,559:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.40s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:39,615:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:39,916:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.40s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:40,499:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:40,980:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:41,678:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:43,147:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:43,860:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.67s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:47,939:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:49,984:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:51,074:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:51,331:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.06s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:51,609:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.15s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:52,290:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.18s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:53,125:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:54,318:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:56,999:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:58,351:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:58,535:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:58,733:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:58,777:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:00:59,397:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:00:59,964:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:00,592:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:04,492:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:07,288:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:08,665:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:08,896:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.23s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:09,601:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.26s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:10,246:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:10,330:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.26s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:10,814:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:14,397:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:14,860:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:14,985:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:15,727:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:16,278:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:16,345:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:16,407:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:16,872:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:23,675:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 5.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:26,521:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:26,837:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:27,246:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:27,690:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:28,192:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:28,213:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:29,258:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:34,133:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:34,516:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.26s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:34,561:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.23s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:34,912:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:35,382:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:35,578:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:36,573:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.73s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:01:36,733:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:47,563:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:47,881:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:50,155:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.26s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:50,612:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:50,664:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:51,071:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:01:59,967:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:03,200:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:12,167:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:12,454:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:15,323:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:15,797:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:16,033:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:16,290:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 7.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:02:21,275:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:02:24,975:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:02:39,017:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 8.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:02:39,220:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:02:39,550:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 8.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:02:41,290:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:02:49,448:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:02:51,033:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.09s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:02:51,407:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:02:53,079:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:03:04,896:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:03:05,044:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:03:05,758:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:03:07,606:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 7.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:17:17,971:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:18,209:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:18,301:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:18,521:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:18,648:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:18,859:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:18,927:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:18,998:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:19,165:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:19,253:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:19,297:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:19,504:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:19,551:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:19,647:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:19,796:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:19,893:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:19,943:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:20,128:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:20,299:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:20,391:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:20,592:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:20,710:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:21,029:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:21,174:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:21,529:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:21,947:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:22,284:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:22,625:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:29,750:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:30,037:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:30,334:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:30,607:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:30,895:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:31,134:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:31,283:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:31,462:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:31,930:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:32,176:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:32,448:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:32,462:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:32,688:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:32,990:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:33,216:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:33,480:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:34,013:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:34,234:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:34,474:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:34,677:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:34,910:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:34,934:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.39s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:35,120:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:35,326:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:17:35,746:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:39,221:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:39,685:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:17:39,833:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:39,853:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:40,141:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:40,298:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:17:40,432:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:17:42,300:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:42,880:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:46,172:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:46,786:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:49,009:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:49,606:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:53,504:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:54,074:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:17:56,833:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:17:57,384:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:18:02,091:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:18:02,593:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:18:13,018:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:18:13,518:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:18:22,070:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.10s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:18:22,611:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:18:28,233:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:18:28,732:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:18:30,130:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:18:30,622:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:18:35,781:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:18:36,363:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:18:38,656:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:18:39,224:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:23:23,518:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:23:23,633:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:23:23,765:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:23:23,881:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:23:23,914:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:23:24,013:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:23:24,030:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:23:24,127:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:23:24,159:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:23:24,257:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:23:24,275:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:23:24,403:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:23:24,524:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:23:24,658:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:23:24,990:INFO:Calculating mean and std
2023-07-05 15:23:25,019:INFO:Creating metrics dataframe
2023-07-05 15:23:25,095:INFO:Uploading results into container
2023-07-05 15:23:25,099:INFO:Uploading model into container now
2023-07-05 15:23:25,101:INFO:_master_model_container: 2
2023-07-05 15:23:25,101:INFO:_display_container: 2
2023-07-05 15:23:25,105:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2023-07-05 15:23:25,105:INFO:create_model() successfully completed......................................
2023-07-05 15:23:26,012:INFO:SubProcess create_model() end ==================================
2023-07-05 15:23:26,012:INFO:Creating metrics dataframe
2023-07-05 15:23:26,041:INFO:Initializing Naive Bayes
2023-07-05 15:23:26,041:INFO:Total runtime is 45.636769100030264 minutes
2023-07-05 15:23:26,045:INFO:SubProcess create_model() called ==================================
2023-07-05 15:23:26,045:INFO:Initializing create_model()
2023-07-05 15:23:26,045:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff4d4f5d220>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 15:23:26,046:INFO:Checking exceptions
2023-07-05 15:23:26,047:INFO:Importing libraries
2023-07-05 15:23:26,049:INFO:Copying training dataset
2023-07-05 15:23:27,031:INFO:Defining folds
2023-07-05 15:23:27,031:INFO:Declaring metric variables
2023-07-05 15:23:27,035:INFO:Importing untrained model
2023-07-05 15:23:27,040:INFO:Naive Bayes Imported successfully
2023-07-05 15:23:27,053:INFO:Starting cross validation
2023-07-05 15:23:27,114:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 15:23:36,031:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:37,432:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:40,226:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:41,286:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:42,360:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:42,435:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:42,856:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:43,588:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:44,808:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:45,542:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:46,319:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:46,826:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.67s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:47,018:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:47,362:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:47,794:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:48,088:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.73s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:48,951:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:49,616:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:52,558:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:53,676:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:53,906:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:54,152:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:54,496:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:55,339:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:55,706:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:56,666:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:59,590:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.67s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:23:59,667:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:23:59,867:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:00,274:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.69s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:00,600:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.63s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:01,043:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.64s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:01,398:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:02,335:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:06,287:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.64s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:07,599:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.09s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:07,946:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:08,130:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:08,632:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:09,361:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:09,692:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:10,503:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.60s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:13,312:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.55s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:13,506:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.55s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:13,941:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:14,313:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:14,648:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:15,028:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:15,470:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:15,796:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.51s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:22,084:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.31s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:22,805:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:23,038:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:23,850:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:23,927:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:24,795:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:25,140:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:25,716:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:30,470:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.63s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:30,734:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:31,582:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:32,662:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.45s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:32,821:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.46s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:32,886:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.06s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:33,717:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:34,899:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.69s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:42,524:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:42,639:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:43,301:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:44,177:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:44,953:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:45,288:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:24:56,700:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:24:58,481:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:05,030:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:05,059:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:05,770:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.48s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:06,814:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:07,549:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:08,025:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 6.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:26,192:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:27,894:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:32,748:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:32,961:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:33,209:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:33,399:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:33,641:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:33,852:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:34,084:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:34,281:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:34,358:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.23s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:34,404:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:34,647:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:34,800:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.15s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:34,922:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:35,160:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:35,412:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:35,652:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:35,891:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:35,923:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:36,841:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.45s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:37,458:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:25:41,164:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:41,262:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:41,398:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:41,482:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:41,530:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:41,660:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:41,737:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:41,775:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:41,902:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:41,977:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:42,042:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:42,160:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:42,249:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:42,284:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:42,392:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:42,476:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:42,485:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:42,549:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:42,671:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:42,722:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:42,768:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:42,803:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:43,091:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:43,232:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:43,257:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:43,472:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:25:43,494:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:43,503:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:43,739:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:43,764:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:43,854:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:25:43,974:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:44,043:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:44,172:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:44,245:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:44,350:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:44,426:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:44,508:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:25:44,553:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:44,641:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:25:44,801:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:25:44,976:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:25:46,213:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:46,940:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:49,688:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:25:50,345:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:25:52,647:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:53,279:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:25:56,393:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:25:57,019:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:25:59,378:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:26:00,054:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.39s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:26:04,008:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:26:04,622:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:26:07,257:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.31s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:26:07,893:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:26:12,233:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:26:12,830:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.31s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:26:23,194:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:26:23,710:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:26:32,962:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:26:33,487:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:26:39,619:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:26:40,066:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:26:41,449:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:26:41,895:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:26:46,887:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:26:47,287:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:26:49,510:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.60s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:26:49,913:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.60s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:26:53,023:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:26:53,135:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:26:53,260:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:26:53,373:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:26:53,373:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:26:53,484:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:26:53,497:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:26:53,607:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:26:53,610:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:26:53,722:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:26:53,733:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:26:53,846:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:26:53,960:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:26:54,092:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:26:54,443:INFO:Calculating mean and std
2023-07-05 15:26:54,461:INFO:Creating metrics dataframe
2023-07-05 15:26:54,543:INFO:Uploading results into container
2023-07-05 15:26:54,545:INFO:Uploading model into container now
2023-07-05 15:26:54,546:INFO:_master_model_container: 3
2023-07-05 15:26:54,547:INFO:_display_container: 2
2023-07-05 15:26:54,548:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2023-07-05 15:26:54,548:INFO:create_model() successfully completed......................................
2023-07-05 15:26:55,494:INFO:SubProcess create_model() end ==================================
2023-07-05 15:26:55,495:INFO:Creating metrics dataframe
2023-07-05 15:26:55,506:INFO:Initializing Decision Tree Classifier
2023-07-05 15:26:55,506:INFO:Total runtime is 49.12785627841949 minutes
2023-07-05 15:26:55,510:INFO:SubProcess create_model() called ==================================
2023-07-05 15:26:55,511:INFO:Initializing create_model()
2023-07-05 15:26:55,511:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff4d4f5d220>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 15:26:55,511:INFO:Checking exceptions
2023-07-05 15:26:55,511:INFO:Importing libraries
2023-07-05 15:26:55,512:INFO:Copying training dataset
2023-07-05 15:26:56,445:INFO:Defining folds
2023-07-05 15:26:56,445:INFO:Declaring metric variables
2023-07-05 15:26:56,449:INFO:Importing untrained model
2023-07-05 15:26:56,454:INFO:Decision Tree Classifier Imported successfully
2023-07-05 15:26:56,464:INFO:Starting cross validation
2023-07-05 15:26:56,507:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 15:27:03,625:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:04,311:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:05,887:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:06,804:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:10,359:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.40s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:11,240:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:11,691:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:11,831:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:11,909:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:12,537:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:12,795:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:13,408:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:15,567:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:16,720:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:16,744:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:17,962:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:19,476:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:20,517:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:21,669:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:22,390:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.15s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:25,058:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:26,504:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:26,583:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:27,141:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.18s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:27,614:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:28,284:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:29,743:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:30,069:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:32,074:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:33,415:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:33,533:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.17s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:34,345:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.39s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:36,361:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:37,117:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:39,527:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:39,903:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:41,488:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:42,841:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:42,853:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:43,490:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:43,598:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:43,802:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:45,478:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:45,738:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:47,409:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:48,569:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:48,689:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:49,464:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:27:52,834:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:53,011:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:27:54,929:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:01,036:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.09s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:04,210:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:06,888:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:07,099:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:07,572:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:08,621:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:08,684:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:10,277:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:18,591:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:20,575:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:24,111:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.69s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:25,564:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:26,646:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:30,594:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:31,040:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.09s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:32,102:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:28:56,820:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:28:57,719:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:00,945:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:01,882:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:02,296:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:03,035:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:03,281:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:05,072:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:05,263:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:06,387:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:07,199:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:07,547:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:08,596:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:08,728:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:09,383:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:09,631:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:09,739:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:10,316:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:10,695:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:10,716:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:10,905:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:11,781:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:12,905:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:13,072:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:13,812:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:14,418:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:14,764:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:15,770:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:17,327:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:17,635:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:17,800:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:18,139:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:18,560:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:18,872:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:19,041:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:19,097:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:19,210:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:19,316:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:19,474:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:19,624:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:19,765:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:19,822:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:19,884:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:20,109:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:20,168:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:20,430:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:20,711:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:21,701:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:21,958:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:22,517:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:29:23,017:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:23,926:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:24,146:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:24,212:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:24,605:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:24,877:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:25,183:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:25,444:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:25,752:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:26,027:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:26,239:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:26,306:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:26,500:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:26,715:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:29:26,773:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:26,832:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:27,016:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:27,122:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:27,175:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:27,294:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:27,369:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:27,436:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:27,542:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:27,728:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:27,818:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:27,975:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:28,125:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:28,251:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:28,371:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:28,463:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:28,593:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:28,680:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:28,792:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:29,026:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:29,227:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:29,301:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:29,421:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:29,885:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:29:30,042:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:30,217:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:30,270:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:30,372:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:30,543:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:29:30,698:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:29:30,868:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:29:31,908:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:32,741:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:35,397:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:36,180:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:38,789:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.06s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:39,655:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.01s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:42,935:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:43,770:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:46,139:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.55s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:46,913:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:51,207:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:51,942:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:29:54,788:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:29:55,566:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:30:00,494:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:30:01,222:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:30:12,738:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:30:13,437:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:30:22,294:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:30:22,906:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:30:42,712:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:30:43,442:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:30:44,661:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:30:45,390:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:30:50,469:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:30:51,210:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 15:30:53,304:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:30:54,052:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 15:30:56,208:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:30:56,331:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:30:56,469:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:30:56,589:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:30:56,727:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:30:56,849:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:30:56,926:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 15:30:56,982:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:30:57,043:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:30:57,172:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:30:57,298:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:30:57,427:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 15:30:57,544:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 15:30:57,674:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 15:30:58,002:INFO:Calculating mean and std
2023-07-05 15:30:58,017:INFO:Creating metrics dataframe
2023-07-05 15:30:58,074:INFO:Uploading results into container
2023-07-05 15:30:58,076:INFO:Uploading model into container now
2023-07-05 15:30:58,079:INFO:_master_model_container: 4
2023-07-05 15:30:58,079:INFO:_display_container: 2
2023-07-05 15:30:58,083:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       random_state=7765, splitter='best')
2023-07-05 15:30:58,084:INFO:create_model() successfully completed......................................
2023-07-05 15:30:58,854:INFO:SubProcess create_model() end ==================================
2023-07-05 15:30:58,854:INFO:Creating metrics dataframe
2023-07-05 15:30:58,871:INFO:Initializing SVM - Linear Kernel
2023-07-05 15:30:58,871:INFO:Total runtime is 53.18393673102061 minutes
2023-07-05 15:30:58,877:INFO:SubProcess create_model() called ==================================
2023-07-05 15:30:58,878:INFO:Initializing create_model()
2023-07-05 15:30:58,878:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff4d4f5d220>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 15:30:58,878:INFO:Checking exceptions
2023-07-05 15:30:58,878:INFO:Importing libraries
2023-07-05 15:30:58,878:INFO:Copying training dataset
2023-07-05 15:30:59,750:INFO:Defining folds
2023-07-05 15:30:59,751:INFO:Declaring metric variables
2023-07-05 15:30:59,756:INFO:Importing untrained model
2023-07-05 15:30:59,769:INFO:SVM - Linear Kernel Imported successfully
2023-07-05 15:30:59,784:INFO:Starting cross validation
2023-07-05 15:30:59,826:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 15:31:07,914:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:08,708:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:09,496:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:10,342:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:11,202:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:11,936:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.68s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:12,168:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:12,956:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:12,996:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:13,630:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:13,962:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:14,808:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.06s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:15,922:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.28s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:17,488:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.55s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:18,097:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.28s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:19,168:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:19,269:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:20,529:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.01s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:21,061:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:21,976:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:22,953:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:24,071:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:24,595:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:25,234:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:25,676:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:26,468:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:26,997:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:27,924:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:28,802:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:29,960:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:30,562:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:31,833:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.01s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:33,021:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:34,373:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:36,262:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:36,797:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:37,741:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:38,567:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:38,901:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:39,363:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:40,208:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.96s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:40,548:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:42,705:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:43,170:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:44,030:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:45,050:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:45,399:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:46,866:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 15:31:49,542:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:50,907:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:53,705:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:31:59,937:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.41s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:32:01,794:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:32:02,355:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:32:04,175:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 15:32:04,437:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:47:35,247:INFO:Initializing compare_models()
2023-07-05 17:47:35,250:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-07-05 17:47:35,250:INFO:Checking exceptions
2023-07-05 17:47:36,301:INFO:Preparing display monitor
2023-07-05 17:47:36,641:INFO:Initializing Logistic Regression
2023-07-05 17:47:36,641:INFO:Total runtime is 2.6849905649820962e-05 minutes
2023-07-05 17:47:36,649:INFO:SubProcess create_model() called ==================================
2023-07-05 17:47:36,653:INFO:Initializing create_model()
2023-07-05 17:47:36,654:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff491c34550>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 17:47:36,655:INFO:Checking exceptions
2023-07-05 17:47:36,656:INFO:Importing libraries
2023-07-05 17:47:36,656:INFO:Copying training dataset
2023-07-05 17:47:37,280:INFO:Defining folds
2023-07-05 17:47:37,280:INFO:Declaring metric variables
2023-07-05 17:47:37,284:INFO:Importing untrained model
2023-07-05 17:47:37,292:INFO:Logistic Regression Imported successfully
2023-07-05 17:47:37,305:INFO:Starting cross validation
2023-07-05 17:47:37,441:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 17:47:52,472:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:05,176:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:05,236:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:05,274:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.20s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:07,117:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:07,203:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:10,021:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.60s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:10,052:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.56s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:10,200:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:12,684:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:12,928:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:12,979:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:15,174:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:15,481:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.01s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:17,377:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:17,526:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:17,635:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:17,803:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:18,147:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:18,149:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:20,138:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:20,414:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:22,955:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:23,055:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:23,061:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:26,474:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.12s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:27,291:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:27,309:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:29,147:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:29,697:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:31,941:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:32,275:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:32,372:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:48:41,993:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:42,656:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:42,768:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:44,428:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:44,962:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:46,920:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:47,015:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:48:47,158:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 17:49:02,471:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 8.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:04,172:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 8.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:04,201:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 8.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:08,514:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.60s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:09,928:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 9.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:12,978:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:13,557:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:49:15,543:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 7.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 17:59:21,193:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:22,650:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:24,870:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:26,676:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:30,164:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:31,657:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.46s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:33,720:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:35,089:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:36,359:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:36,412:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:36,681:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:36,951:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:37,620:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:37,880:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.17s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:38,196:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.23s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:39,484:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:40,274:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:43,264:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:43,818:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:43,854:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 17:59:45,136:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 1.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 17:59:47,092:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:47,587:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.71s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:48,405:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:48,466:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:49,543:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:49,955:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:50,967:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:51,459:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:52,312:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 17:59:52,437:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:53,371:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:53,753:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:55,273:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 17:59:55,857:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:56,208:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 17:59:56,434:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 17:59:56,898:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 3.15s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:56,911:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 17:59:57,149:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 17:59:57,369:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 17:59:59,091:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.50s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 17:59:59,111:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 17:59:59,342:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 17:59:59,637:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 17:59:59,685:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 17:59:59,876:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:00,157:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:00,397:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:00,608:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:00:00,683:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:00,741:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 1.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:00:01,444:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:00:01,843:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:00:02,991:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:00:03,658:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:00:03,889:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:04,173:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:04,422:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:04,470:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.81s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:00:04,708:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:04,950:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:05,217:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:05,366:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:00:05,744:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:00:06,916:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:00:07,128:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:07,383:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:07,596:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:07,774:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.17s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:07,852:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:08,093:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:08,255:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:00:08,337:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:08,488:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:08,591:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:00:08,752:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:08,972:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:09,118:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:00:09,232:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:09,312:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:00:09,328:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:09,426:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:09,516:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:09,540:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:09,643:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.80s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:09,650:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:09,731:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:09,739:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:09,953:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:09,967:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:10,171:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:10,192:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:10,400:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:10,400:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:10,604:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:11,165:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.28s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:11,447:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 2.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:00:12,431:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:13,663:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:00:13,799:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:13,947:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:14,081:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:14,228:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:00:14,361:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:00:14,510:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:00:14,897:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:16,088:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:17,949:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:19,076:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:21,849:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:22,993:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:24,779:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.39s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:25,930:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.40s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:29,553:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:30,645:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:32,905:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:34,017:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.38s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:38,009:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:39,137:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:49,276:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:50,431:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:00:58,649:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.23s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:00:59,855:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.25s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:05:56,180:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 18:05:59,207:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-05 18:05:59,804:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 0.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-05 18:06:03,092:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:06:05,091:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.89s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:06:06,113:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.90s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:06:08,147:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 0.88s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:06:11,557:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:06:14,621:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:06:14,712:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:108: UserWarning: Persisting input arguments took 2.28s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2023-07-05 18:06:17,691:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:06:17,761:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 3.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:06:17,805:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:06:17,934:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:06:18,051:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:06:18,192:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:06:18,330:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:06:18,480:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:06:20,746:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py:138: FitFailedWarning: Metric 'make_scorer(roc_auc_score, needs_proba=True, error_score=0.0, average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 130, in _score
    return super()._score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_scorer.py", line 327, in _score
    return self._sign * self._score_func(y, y_pred, **self._kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/metrics.py", line 35, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 566, in roc_auc_score
    return _multiclass_roc_auc_score(
  File "/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_ranking.py", line 683, in _multiclass_roc_auc_score
    raise ValueError(
ValueError: Number of classes in y_true not equal to the number of columns in 'y_score'

  warnings.warn(

2023-07-05 18:06:20,889:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:06:21,046:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:06:21,172:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:06:21,321:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, msg_start, len(result))

2023-07-05 18:06:21,439:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1396: UserWarning: Note that pos_label (set to 'UN') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2023-07-05 18:06:21,568:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/metrics/_classification.py:1609: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, "true nor predicted", "F-score is", len(true_sum))

2023-07-05 18:06:21,918:INFO:Calculating mean and std
2023-07-05 18:06:21,951:INFO:Creating metrics dataframe
2023-07-05 18:06:22,038:INFO:Uploading results into container
2023-07-05 18:06:22,045:INFO:Uploading model into container now
2023-07-05 18:06:22,052:INFO:_master_model_container: 5
2023-07-05 18:06:22,052:INFO:_display_container: 2
2023-07-05 18:06:22,059:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7765, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2023-07-05 18:06:22,060:INFO:create_model() successfully completed......................................
2023-07-05 18:06:24,019:INFO:SubProcess create_model() end ==================================
2023-07-05 18:06:24,019:INFO:Creating metrics dataframe
2023-07-05 18:06:24,035:INFO:Initializing K Neighbors Classifier
2023-07-05 18:06:24,035:INFO:Total runtime is 18.789915434519447 minutes
2023-07-05 18:06:24,039:INFO:SubProcess create_model() called ==================================
2023-07-05 18:06:24,040:INFO:Initializing create_model()
2023-07-05 18:06:24,040:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7ff4cf7fb580>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7ff491c34550>, model_only=True, return_train_score=False, kwargs={})
2023-07-05 18:06:24,040:INFO:Checking exceptions
2023-07-05 18:06:24,040:INFO:Importing libraries
2023-07-05 18:06:24,040:INFO:Copying training dataset
2023-07-05 18:06:25,000:INFO:Defining folds
2023-07-05 18:06:25,000:INFO:Declaring metric variables
2023-07-05 18:06:25,006:INFO:Importing untrained model
2023-07-05 18:06:25,013:INFO:K Neighbors Classifier Imported successfully
2023-07-05 18:06:25,032:INFO:Starting cross validation
2023-07-05 18:06:25,089:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-05 18:06:34,851:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.29s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:06:52,846:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:53,939:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:54,793:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.01s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:54,841:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.02s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:54,896:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:56,847:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:58,593:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:06:58,610:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 3.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:02,767:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:04,422:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.09s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:04,447:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:04,564:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.46s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:04,792:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.64s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:05,280:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.05s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:07,082:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:07,225:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:07,526:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:09,095:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:09,140:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:09,236:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.77s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:09,348:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.75s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:09,760:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.74s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:11,966:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:12,343:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:16,597:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:20,336:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:20,749:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.54s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:20,764:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.79s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:21,205:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:22,301:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.30s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:23,110:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.36s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:23,552:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:34,136:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.49s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:37,248:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:37,912:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.51s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:37,974:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:38,020:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:39,006:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.17s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:39,599:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.07s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:39,925:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 4.04s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-05 18:07:50,450:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:55,564:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.22s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:55,691:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.18s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:55,729:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:56,314:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.19s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:57,422:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.35s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:07:57,619:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.28s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-05 18:08:06,755:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 5.82s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:10,625:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 4.13s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:17,969:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.61s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:17,988:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.63s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:18,034:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:18,465:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.53s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:19,965:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.48s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 18:08:19,993:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 6.48s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-05 21:12:33,459:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:12:33,460:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:12:33,460:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:12:33,460:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:33:52,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:33:52,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:33:52,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-05 21:33:52,856:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 09:49:39,849:INFO:PyCaret ClassificationExperiment
2023-07-06 09:49:39,852:INFO:Logging name: clf-default-name
2023-07-06 09:49:39,854:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-07-06 09:49:39,854:INFO:version 3.0.4
2023-07-06 09:49:39,854:INFO:Initializing setup()
2023-07-06 09:49:39,854:INFO:self.USI: 4a16
2023-07-06 09:49:39,854:INFO:self._variable_keys: {'X_test', 'fold_groups_param', 'y_test', 'memory', 'exp_id', 'logging_param', 'html_param', 'n_jobs_param', 'fix_imbalance', 'is_multiclass', 'X', 'fold_generator', '_available_plots', 'gpu_n_jobs_param', 'pipeline', 'fold_shuffle_param', 'idx', 'target_param', '_ml_usecase', 'log_plots_param', 'gpu_param', 'USI', 'y', 'y_train', 'exp_name_log', 'seed', 'data', 'X_train'}
2023-07-06 09:49:39,855:INFO:Checking environment
2023-07-06 09:49:39,858:INFO:python_version: 3.8.16
2023-07-06 09:49:39,858:INFO:python_build: ('default', 'Jun 12 2023 12:55:15')
2023-07-06 09:49:39,858:INFO:machine: x86_64
2023-07-06 09:49:39,858:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-07-06 09:49:39,863:INFO:Memory: svmem(total=17179869184, available=4785696768, percent=72.1, used=8743514112, free=3698688, active=4786221056, inactive=4781174784, wired=3957293056)
2023-07-06 09:49:39,864:INFO:Physical Core: 4
2023-07-06 09:49:39,864:INFO:Logical Core: 8
2023-07-06 09:49:39,864:INFO:Checking libraries
2023-07-06 09:49:39,864:INFO:System:
2023-07-06 09:49:39,865:INFO:    python: 3.8.16 (default, Jun 12 2023, 12:55:15)  [Clang 14.0.6 ]
2023-07-06 09:49:39,865:INFO:executable: /Users/marwahfaraj/miniconda3/envs/my_env/bin/python
2023-07-06 09:49:39,865:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-07-06 09:49:39,865:INFO:PyCaret required dependencies:
2023-07-06 09:49:39,898:INFO:                 pip: 23.1.2
2023-07-06 09:49:39,898:INFO:          setuptools: 67.8.0
2023-07-06 09:49:39,898:INFO:             pycaret: 3.0.4
2023-07-06 09:49:39,898:INFO:             IPython: 8.12.0
2023-07-06 09:49:39,898:INFO:          ipywidgets: 8.0.7
2023-07-06 09:49:39,898:INFO:                tqdm: 4.65.0
2023-07-06 09:49:39,898:INFO:               numpy: 1.23.5
2023-07-06 09:49:39,898:INFO:              pandas: 1.5.3
2023-07-06 09:49:39,898:INFO:              jinja2: 3.1.2
2023-07-06 09:49:39,898:INFO:               scipy: 1.10.1
2023-07-06 09:49:39,898:INFO:              joblib: 1.3.1
2023-07-06 09:49:39,898:INFO:             sklearn: 1.2.2
2023-07-06 09:49:39,898:INFO:                pyod: 1.1.0
2023-07-06 09:49:39,898:INFO:            imblearn: 0.10.1
2023-07-06 09:49:39,899:INFO:   category_encoders: 2.6.1
2023-07-06 09:49:39,899:INFO:            lightgbm: 3.3.5
2023-07-06 09:49:39,899:INFO:               numba: 0.57.1
2023-07-06 09:49:39,899:INFO:            requests: 2.31.0
2023-07-06 09:49:39,899:INFO:          matplotlib: 3.7.1
2023-07-06 09:49:39,899:INFO:          scikitplot: 0.3.7
2023-07-06 09:49:39,899:INFO:         yellowbrick: 1.5
2023-07-06 09:49:39,899:INFO:              plotly: 5.15.0
2023-07-06 09:49:39,899:INFO:    plotly-resampler: Not installed
2023-07-06 09:49:39,899:INFO:             kaleido: 0.2.1
2023-07-06 09:49:39,899:INFO:           schemdraw: 0.15
2023-07-06 09:49:39,899:INFO:         statsmodels: 0.14.0
2023-07-06 09:49:39,899:INFO:              sktime: 0.20.0
2023-07-06 09:49:39,899:INFO:               tbats: 1.1.3
2023-07-06 09:49:39,899:INFO:            pmdarima: 2.0.3
2023-07-06 09:49:39,899:INFO:              psutil: 5.9.5
2023-07-06 09:49:39,899:INFO:          markupsafe: 2.1.3
2023-07-06 09:49:39,899:INFO:             pickle5: Not installed
2023-07-06 09:49:39,899:INFO:         cloudpickle: 2.2.1
2023-07-06 09:49:39,899:INFO:         deprecation: 2.1.0
2023-07-06 09:49:39,899:INFO:              xxhash: 3.2.0
2023-07-06 09:49:39,899:INFO:           wurlitzer: 3.0.3
2023-07-06 09:49:39,899:INFO:PyCaret optional dependencies:
2023-07-06 09:49:39,933:INFO:                shap: Not installed
2023-07-06 09:49:39,933:INFO:           interpret: Not installed
2023-07-06 09:49:39,933:INFO:                umap: Not installed
2023-07-06 09:49:39,933:INFO:    pandas_profiling: 4.3.1
2023-07-06 09:49:39,933:INFO:  explainerdashboard: Not installed
2023-07-06 09:49:39,934:INFO:             autoviz: Not installed
2023-07-06 09:49:39,934:INFO:           fairlearn: Not installed
2023-07-06 09:49:39,934:INFO:          deepchecks: Not installed
2023-07-06 09:49:39,934:INFO:             xgboost: Not installed
2023-07-06 09:49:39,934:INFO:            catboost: Not installed
2023-07-06 09:49:39,934:INFO:              kmodes: Not installed
2023-07-06 09:49:39,934:INFO:             mlxtend: Not installed
2023-07-06 09:49:39,934:INFO:       statsforecast: Not installed
2023-07-06 09:49:39,934:INFO:        tune_sklearn: Not installed
2023-07-06 09:49:39,934:INFO:                 ray: Not installed
2023-07-06 09:49:39,934:INFO:            hyperopt: Not installed
2023-07-06 09:49:39,934:INFO:              optuna: Not installed
2023-07-06 09:49:39,934:INFO:               skopt: Not installed
2023-07-06 09:49:39,934:INFO:              mlflow: Not installed
2023-07-06 09:49:39,934:INFO:              gradio: Not installed
2023-07-06 09:49:39,934:INFO:             fastapi: Not installed
2023-07-06 09:49:39,934:INFO:             uvicorn: Not installed
2023-07-06 09:49:39,934:INFO:              m2cgen: Not installed
2023-07-06 09:49:39,934:INFO:           evidently: Not installed
2023-07-06 09:49:39,934:INFO:               fugue: Not installed
2023-07-06 09:49:39,934:INFO:           streamlit: 1.23.1
2023-07-06 09:49:39,934:INFO:             prophet: Not installed
2023-07-06 09:49:39,934:INFO:None
2023-07-06 09:49:39,935:INFO:Set up data.
2023-07-06 09:49:49,993:INFO:Set up train/test split.
2023-07-06 09:49:55,766:INFO:Set up index.
2023-07-06 09:49:56,290:INFO:Set up folding strategy.
2023-07-06 09:49:56,291:INFO:Assigning column types.
2023-07-06 09:49:59,183:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-07-06 09:49:59,257:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-07-06 09:49:59,295:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-06 09:49:59,410:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,564:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,624:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-07-06 09:49:59,625:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-06 09:49:59,660:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,660:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,661:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-07-06 09:49:59,718:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-06 09:49:59,754:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,755:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,809:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-06 09:49:59,847:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,848:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,848:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-07-06 09:49:59,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:49:59,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:50:00,038:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:50:00,039:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 09:50:00,049:INFO:Preparing preprocessing pipeline...
2023-07-06 09:50:00,464:INFO:Set up simple imputation.
2023-07-06 10:12:07,985:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 10:12:07,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 10:12:07,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 10:12:07,986:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 10:25:15,963:INFO:Finished creating preprocessing pipeline.
2023-07-06 10:25:16,001:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/82/m9t9280x1r134kqynmcb35l40000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['feature_1', 'feature_2',
                                             'feature_3', 'feature_4',
                                             'feature_5', 'feature_6',
                                             'feature_7', 'feature_8',
                                             'feature_9', 'feature_10',
                                             'feature_11', 'feature_12',
                                             'feature_13', 'feature_14',
                                             'feature_15', 'f...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-07-06 10:25:16,001:INFO:Creating final display dataframe.
2023-07-06 11:27:29,301:INFO:Setup _display_container:                     Description             Value
0                    Session id              5418
1                        Target            target
2                   Target type        Multiclass
3           Original data shape     (3434990, 43)
4        Transformed data shape     (3434990, 43)
5   Transformed train set shape     (2404493, 43)
6    Transformed test set shape     (1030497, 43)
7              Numeric features                42
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              4a16
2023-07-06 11:27:29,938:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 11:27:29,943:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 11:27:30,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 11:27:30,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-06 11:27:30,143:INFO:setup() successfully completed in 5870.42s...............
2023-07-06 11:29:27,008:INFO:Initializing compare_models()
2023-07-06 11:29:27,010:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f7d48fb9d30>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x7f7d48fb9d30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-07-06 11:29:27,011:INFO:Checking exceptions
2023-07-06 11:29:29,596:INFO:Preparing display monitor
2023-07-06 11:29:30,065:INFO:Initializing Logistic Regression
2023-07-06 11:29:30,066:INFO:Total runtime is 9.032090504964193e-06 minutes
2023-07-06 11:29:30,077:INFO:SubProcess create_model() called ==================================
2023-07-06 11:29:30,088:INFO:Initializing create_model()
2023-07-06 11:29:30,088:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f7d48fb9d30>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f7d5fd82730>, model_only=True, return_train_score=False, kwargs={})
2023-07-06 11:29:30,088:INFO:Checking exceptions
2023-07-06 11:29:30,089:INFO:Importing libraries
2023-07-06 11:29:30,089:INFO:Copying training dataset
2023-07-06 11:29:35,071:INFO:Defining folds
2023-07-06 11:29:35,073:INFO:Declaring metric variables
2023-07-06 11:29:35,091:INFO:Importing untrained model
2023-07-06 11:29:35,104:INFO:Logistic Regression Imported successfully
2023-07-06 11:29:35,121:INFO:Starting cross validation
2023-07-06 11:29:35,130:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-06 11:30:05,354:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,355:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.27s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,355:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.42s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,356:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,356:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.70s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,363:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 2.34s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,362:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.66s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:05,373:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.67s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 11:30:28,996:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:29,129:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 6.72s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:29,178:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:29,336:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.08s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:29,490:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.15s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:29,519:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:29,607:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.16s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:30,240:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:39,225:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.32s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:39,370:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:39,434:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:39,485:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.24s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:39,605:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.91s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:39,689:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 11:30:40,105:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.98s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:54:38,314:INFO:Initializing compare_models()
2023-07-06 13:54:38,318:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f7d48fb9d30>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x7f7d48fb9d30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-07-06 13:54:38,321:INFO:Checking exceptions
2023-07-06 13:54:45,130:INFO:Preparing display monitor
2023-07-06 13:54:45,430:INFO:Initializing Logistic Regression
2023-07-06 13:54:45,430:INFO:Total runtime is 7.64926274617513e-06 minutes
2023-07-06 13:54:45,435:INFO:SubProcess create_model() called ==================================
2023-07-06 13:54:45,441:INFO:Initializing create_model()
2023-07-06 13:54:45,441:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7f7d48fb9d30>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7f7d4afc0d30>, model_only=True, return_train_score=False, kwargs={})
2023-07-06 13:54:45,442:INFO:Checking exceptions
2023-07-06 13:54:45,443:INFO:Importing libraries
2023-07-06 13:54:45,443:INFO:Copying training dataset
2023-07-06 13:54:49,567:INFO:Defining folds
2023-07-06 13:54:49,567:INFO:Declaring metric variables
2023-07-06 13:54:49,572:INFO:Importing untrained model
2023-07-06 13:54:49,585:INFO:Logistic Regression Imported successfully
2023-07-06 13:54:49,603:INFO:Starting cross validation
2023-07-06 13:54:49,628:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-06 13:55:09,516:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.51s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 13:55:11,920:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 1.44s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-06 13:55:14,768:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.47s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:55:21,324:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:55:26,315:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.65s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:55:26,322:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.52s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:55:26,324:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 5.58s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:55:29,003:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 13:55:29,030:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.11s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-06 18:40:09,424:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 18:40:09,425:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 18:40:09,425:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 18:40:09,425:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 19:45:56,512:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 19:45:56,512:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 19:45:56,512:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-06 19:45:56,512:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:47:27,994:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:47:27,995:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:47:27,995:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:47:27,995:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:48:15,403:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:48:15,404:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:48:15,404:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 01:48:15,404:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 04:14:13,750:INFO:PyCaret ClassificationExperiment
2023-07-07 04:14:13,751:INFO:Logging name: clf-default-name
2023-07-07 04:14:13,751:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2023-07-07 04:14:13,751:INFO:version 3.0.4
2023-07-07 04:14:13,751:INFO:Initializing setup()
2023-07-07 04:14:13,751:INFO:self.USI: 2925
2023-07-07 04:14:13,751:INFO:self._variable_keys: {'pipeline', 'exp_id', 'fold_shuffle_param', 'fold_generator', '_ml_usecase', 'target_param', 'n_jobs_param', 'X_test', 'gpu_n_jobs_param', 'exp_name_log', 'y_train', 'idx', 'logging_param', 'gpu_param', 'X', 'fix_imbalance', 'USI', 'seed', 'fold_groups_param', 'html_param', 'is_multiclass', 'data', 'log_plots_param', 'X_train', 'y', 'y_test', '_available_plots', 'memory'}
2023-07-07 04:14:13,751:INFO:Checking environment
2023-07-07 04:14:13,751:INFO:python_version: 3.8.16
2023-07-07 04:14:13,751:INFO:python_build: ('default', 'Jun 12 2023 12:55:15')
2023-07-07 04:14:13,751:INFO:machine: x86_64
2023-07-07 04:14:13,752:INFO:platform: macOS-10.16-x86_64-i386-64bit
2023-07-07 04:14:13,752:INFO:Memory: svmem(total=17179869184, available=6465634304, percent=62.4, used=8845811712, free=183246848, active=6285709312, inactive=6269919232, wired=2560102400)
2023-07-07 04:14:13,752:INFO:Physical Core: 4
2023-07-07 04:14:13,752:INFO:Logical Core: 8
2023-07-07 04:14:13,752:INFO:Checking libraries
2023-07-07 04:14:13,752:INFO:System:
2023-07-07 04:14:13,753:INFO:    python: 3.8.16 (default, Jun 12 2023, 12:55:15)  [Clang 14.0.6 ]
2023-07-07 04:14:13,753:INFO:executable: /Users/marwahfaraj/miniconda3/envs/my_env/bin/python
2023-07-07 04:14:13,753:INFO:   machine: macOS-10.16-x86_64-i386-64bit
2023-07-07 04:14:13,753:INFO:PyCaret required dependencies:
2023-07-07 04:14:13,761:INFO:                 pip: 23.1.2
2023-07-07 04:14:13,762:INFO:          setuptools: 67.8.0
2023-07-07 04:14:13,762:INFO:             pycaret: 3.0.4
2023-07-07 04:14:13,762:INFO:             IPython: 8.12.0
2023-07-07 04:14:13,762:INFO:          ipywidgets: 8.0.7
2023-07-07 04:14:13,762:INFO:                tqdm: 4.65.0
2023-07-07 04:14:13,762:INFO:               numpy: 1.23.5
2023-07-07 04:14:13,762:INFO:              pandas: 1.5.3
2023-07-07 04:14:13,762:INFO:              jinja2: 3.1.2
2023-07-07 04:14:13,762:INFO:               scipy: 1.10.1
2023-07-07 04:14:13,762:INFO:              joblib: 1.3.1
2023-07-07 04:14:13,762:INFO:             sklearn: 1.2.2
2023-07-07 04:14:13,762:INFO:                pyod: 1.1.0
2023-07-07 04:14:13,762:INFO:            imblearn: 0.10.1
2023-07-07 04:14:13,762:INFO:   category_encoders: 2.6.1
2023-07-07 04:14:13,762:INFO:            lightgbm: 3.3.5
2023-07-07 04:14:13,762:INFO:               numba: 0.57.1
2023-07-07 04:14:13,762:INFO:            requests: 2.31.0
2023-07-07 04:14:13,762:INFO:          matplotlib: 3.7.1
2023-07-07 04:14:13,762:INFO:          scikitplot: 0.3.7
2023-07-07 04:14:13,762:INFO:         yellowbrick: 1.5
2023-07-07 04:14:13,762:INFO:              plotly: 5.15.0
2023-07-07 04:14:13,762:INFO:    plotly-resampler: Not installed
2023-07-07 04:14:13,762:INFO:             kaleido: 0.2.1
2023-07-07 04:14:13,763:INFO:           schemdraw: 0.15
2023-07-07 04:14:13,763:INFO:         statsmodels: 0.14.0
2023-07-07 04:14:13,763:INFO:              sktime: 0.20.0
2023-07-07 04:14:13,763:INFO:               tbats: 1.1.3
2023-07-07 04:14:13,763:INFO:            pmdarima: 2.0.3
2023-07-07 04:14:13,763:INFO:              psutil: 5.9.5
2023-07-07 04:14:13,763:INFO:          markupsafe: 2.1.3
2023-07-07 04:14:13,763:INFO:             pickle5: Not installed
2023-07-07 04:14:13,763:INFO:         cloudpickle: 2.2.1
2023-07-07 04:14:13,763:INFO:         deprecation: 2.1.0
2023-07-07 04:14:13,763:INFO:              xxhash: 3.2.0
2023-07-07 04:14:13,763:INFO:           wurlitzer: 3.0.3
2023-07-07 04:14:13,763:INFO:PyCaret optional dependencies:
2023-07-07 04:14:13,791:INFO:                shap: Not installed
2023-07-07 04:14:13,791:INFO:           interpret: Not installed
2023-07-07 04:14:13,791:INFO:                umap: Not installed
2023-07-07 04:14:13,791:INFO:    pandas_profiling: 4.3.1
2023-07-07 04:14:13,791:INFO:  explainerdashboard: Not installed
2023-07-07 04:14:13,791:INFO:             autoviz: Not installed
2023-07-07 04:14:13,791:INFO:           fairlearn: Not installed
2023-07-07 04:14:13,791:INFO:          deepchecks: Not installed
2023-07-07 04:14:13,791:INFO:             xgboost: 1.7.6
2023-07-07 04:14:13,791:INFO:            catboost: Not installed
2023-07-07 04:14:13,791:INFO:              kmodes: Not installed
2023-07-07 04:14:13,791:INFO:             mlxtend: Not installed
2023-07-07 04:14:13,791:INFO:       statsforecast: Not installed
2023-07-07 04:14:13,791:INFO:        tune_sklearn: Not installed
2023-07-07 04:14:13,791:INFO:                 ray: Not installed
2023-07-07 04:14:13,791:INFO:            hyperopt: Not installed
2023-07-07 04:14:13,791:INFO:              optuna: Not installed
2023-07-07 04:14:13,791:INFO:               skopt: Not installed
2023-07-07 04:14:13,791:INFO:              mlflow: Not installed
2023-07-07 04:14:13,791:INFO:              gradio: Not installed
2023-07-07 04:14:13,791:INFO:             fastapi: Not installed
2023-07-07 04:14:13,791:INFO:             uvicorn: Not installed
2023-07-07 04:14:13,792:INFO:              m2cgen: Not installed
2023-07-07 04:14:13,792:INFO:           evidently: Not installed
2023-07-07 04:14:13,792:INFO:               fugue: Not installed
2023-07-07 04:14:13,792:INFO:           streamlit: 1.23.1
2023-07-07 04:14:13,792:INFO:             prophet: Not installed
2023-07-07 04:14:13,792:INFO:None
2023-07-07 04:14:13,792:INFO:Set up data.
2023-07-07 04:14:19,582:INFO:Set up train/test split.
2023-07-07 04:14:24,344:INFO:Set up index.
2023-07-07 04:14:24,781:INFO:Set up folding strategy.
2023-07-07 04:14:24,783:INFO:Assigning column types.
2023-07-07 04:14:27,080:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2023-07-07 04:14:27,142:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-07-07 04:14:27,167:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-07 04:14:27,238:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 04:14:27,693:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 04:14:27,746:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2023-07-07 04:14:27,746:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-07 04:14:27,777:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 04:14:27,780:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 04:14:27,781:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2023-07-07 04:14:27,831:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-07 04:14:27,866:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 04:14:27,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 04:14:27,920:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2023-07-07 04:14:27,951:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 04:14:27,954:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 04:14:27,955:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2023-07-07 04:14:28,036:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 04:14:28,039:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 04:14:28,120:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 04:14:28,123:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 04:14:28,131:INFO:Preparing preprocessing pipeline...
2023-07-07 04:14:28,470:INFO:Set up simple imputation.
2023-07-07 05:18:54,806:INFO:Finished creating preprocessing pipeline.
2023-07-07 05:18:54,939:INFO:Pipeline: Pipeline(memory=FastMemory(location=/var/folders/82/m9t9280x1r134kqynmcb35l40000gn/T/joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['feature_1', 'feature_2',
                                             'feature_3', 'feature_4',
                                             'feature_5', 'feature_6',
                                             'feature_7', 'feature_8',
                                             'feature_9', 'feature_10',
                                             'feature_11', 'feature_12',
                                             'feature_13', 'feature_14',
                                             'feature_15', 'f...
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean',
                                                              verbose='deprecated'))),
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent',
                                                              verbose='deprecated')))],
         verbose=False)
2023-07-07 05:18:54,940:INFO:Creating final display dataframe.
2023-07-07 09:52:17,092:INFO:Setup _display_container:                     Description             Value
0                    Session id              3590
1                        Target            target
2                   Target type        Multiclass
3           Original data shape     (3434990, 36)
4        Transformed data shape     (3434990, 36)
5   Transformed train set shape     (2404493, 36)
6    Transformed test set shape     (1030497, 36)
7              Numeric features                35
8                    Preprocess              True
9               Imputation type            simple
10           Numeric imputation              mean
11       Categorical imputation              mode
12               Fold Generator   StratifiedKFold
13                  Fold Number                10
14                     CPU Jobs                -1
15                      Use GPU             False
16               Log Experiment             False
17              Experiment Name  clf-default-name
18                          USI              2925
2023-07-07 09:52:17,350:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 09:52:17,358:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 09:52:17,427:INFO:Soft dependency imported: xgboost: 1.7.6
2023-07-07 09:52:17,429:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2023-07-07 09:52:17,444:INFO:setup() successfully completed in 20283.71s...............
2023-07-07 09:52:17,487:INFO:Initializing compare_models()
2023-07-07 09:52:17,487:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb4ade71310>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x7fb4ade71310>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2023-07-07 09:52:17,488:INFO:Checking exceptions
2023-07-07 09:52:18,979:INFO:Preparing display monitor
2023-07-07 09:52:19,193:INFO:Initializing Logistic Regression
2023-07-07 09:52:19,193:INFO:Total runtime is 1.0049343109130859e-05 minutes
2023-07-07 09:52:19,198:INFO:SubProcess create_model() called ==================================
2023-07-07 09:52:19,201:INFO:Initializing create_model()
2023-07-07 09:52:19,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x7fb4ade71310>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x7fb4dbc4adf0>, model_only=True, return_train_score=False, kwargs={})
2023-07-07 09:52:19,202:INFO:Checking exceptions
2023-07-07 09:52:19,202:INFO:Importing libraries
2023-07-07 09:52:19,203:INFO:Copying training dataset
2023-07-07 09:52:21,909:INFO:Defining folds
2023-07-07 09:52:21,910:INFO:Declaring metric variables
2023-07-07 09:52:21,974:INFO:Importing untrained model
2023-07-07 09:52:21,980:INFO:Logistic Regression Imported successfully
2023-07-07 09:52:21,990:INFO:Starting cross validation
2023-07-07 09:52:21,992:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2023-07-07 09:52:39,038:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.92s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:39,122:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.83s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:39,125:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.85s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:39,145:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.84s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:39,158:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:39,180:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.86s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:39,216:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:231: UserWarning: Persisting input arguments took 0.78s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_transformer = self._memory_fit(

2023-07-07 09:52:48,890:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 4.37s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:51,307:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.33s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:51,309:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.99s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:51,309:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.97s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:51,309:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 1.94s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:51,310:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.00s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:52,191:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 2.43s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:53,252:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 3.14s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:52:56,648:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:238: UserWarning: Persisting input arguments took 0.87s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2023-07-07 09:56:29,091:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 09:56:29,092:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 09:56:29,092:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 09:56:29,092:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 11:21:46,224:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:21:55,358:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 8.95s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:21:55,403:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:21:59,255:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 3.76s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:22:00,450:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:22:05,505:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 4.93s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:22:29,440:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:22:31,618:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:22:32,666:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 3.03s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:22:34,534:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:310: UserWarning: Persisting input arguments took 0.62s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, _ = self._memory_full_transform(self, X, None, with_final=False)

2023-07-07 11:22:36,623:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:22:37,456:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:22:38,046:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 6.26s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:22:39,259:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 2.55s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:22:39,769:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 2.21s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 11:22:52,480:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2023-07-07 11:22:56,232:WARNING:/Users/marwahfaraj/miniconda3/envs/my_env/lib/python3.8/site-packages/pycaret/internal/pipeline.py:260: UserWarning: Persisting input arguments took 3.64s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  fitted_estimator = self._memory_fit(

2023-07-07 13:46:52,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 13:46:52,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 13:46:52,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 13:46:52,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 14:38:22,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 14:38:22,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 14:38:22,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-07-07 14:38:22,180:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
